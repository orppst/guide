---
openapi: 3.0.3
info:
  title: pst-api-service API
  version: "0.1"
servers:
- url: http://localhost:8084
  description: Auto generated value
- url: http://0.0.0.0:8084
  description: Auto generated value
tags:
- name: mapping between AAI user ids and People
- name: observatories
- name: observatory-instruments
- name: observatory-telescopes
- name: organizations
- name: people
- name: proposalCycles
- name: proposalCycles-availableResources
- name: proposalCycles-observingModes
- name: proposals
- name: proposals-investigators
- name: proposals-observations
- name: proposals-supportingDocuments
- name: proposals-technicalGoals
- name: simbad
- name: standard Space Coordinate Systems
- name: standard Space frames
paths:
  /pst/api/observatories:
    get:
      tags:
      - observatories
      summary: "get all of the Observatories, optionally provide a name to find the\
        \ specific Observatory"
      operationId: ObservatoryResource_getObservatories
      parameters:
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - observatories
      summary: create a new Observatory in the database
      operationId: ObservatoryResource_createObservatory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observatory'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observatory'
  /pst/api/observatories/{id}:
    get:
      tags:
      - observatories
      summary: get the specified Observatory
      operationId: ObservatoryResource_getObservatory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observatory'
    delete:
      tags:
      - observatories
      summary: delete the Observatory specified by the 'id' from the database
      operationId: ObservatoryResource_deleteObservatory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/address:
    put:
      tags:
      - observatories
      summary: update an Observatory's address
      operationId: ObservatoryResource_updateAddress
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/array:
    put:
      tags:
      - observatories
      summary: add an existing TelescopeArray to the Observatory
      operationId: ObservatoryResource_addArray
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
    post:
      tags:
      - observatories
      summary: create a TelescopeArray in the database and add it to the Observatory
        specified by the 'id'
      operationId: ObservatoryResource_createAndAddArray
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelescopeArray'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/backend:
    get:
      tags:
      - observatories
      summary: get all the Backends associated with the Observatory specified by the
        'id'
      operationId: ObservatoryResource_getObservatoryBackends
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Backend'
    put:
      tags:
      - observatories
      summary: add an Observatory backend
      operationId: ObservatoryResource_addBackend
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
    post:
      tags:
      - observatories
      summary: create a Backend in the database and add it to the Observatory specified
        by the 'id'
      operationId: ObservatoryResource_createAndAddBackend
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backend'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backend'
  /pst/api/observatories/{id}/backend/{subId}:
    get:
      tags:
      - observatories
      summary: get the specific Backend associated with the Observatory
      operationId: ObservatoryResource_getObservatoryBackend
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: subId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backend'
  /pst/api/observatories/{id}/backend/{subId}/parallel:
    put:
      tags:
      - observatories
      summary: update the 'parallel' status (true/false) of the Backend specified
        by the 'subId'
      operationId: ObservatoryResource_updateBackendParallel
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: subId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/ivoId:
    put:
      tags:
      - observatories
      summary: update an Observatory's ivoId
      operationId: ObservatoryResource_updateObservatoryIvoId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/name:
    put:
      tags:
      - observatories
      summary: update an Observatory name
      operationId: ObservatoryResource_updateObservatoryName
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{id}/wikiId:
    put:
      tags:
      - observatories
      summary: update an Observatory's wikiId
      operationId: ObservatoryResource_updateObservatoryWikiId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/backend/{backendId}/name:
    put:
      tags:
      - observatories
      summary: replace the name of the Backend specified by the 'subId'
      operationId: ObservatoryResource_replaceBackendName
      parameters:
      - name: backendId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments:
    get:
      tags:
      - observatory-instruments
      summary: "get all Instrument identifiers associated with the given Observatory,\
        \ optionally provide a name to find a specific Instrument"
      operationId: InstrumentResource_getObservatoryInstruments
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - observatory-instruments
      summary: create an Instrument in the database and add it to the Observatory
        specified by the 'id'
      operationId: InstrumentResource_createAndAddInstrumentToObservatory
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instrument'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instrument'
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}:
    delete:
      tags:
      - observatory-instruments
      summary: "remove the Instrument specified by 'instrumentId' from the given Observatory,\
        \ also removes the instrument from the database"
      operationId: InstrumentResource_removeInstrumentFromObservatory
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/description:
    put:
      tags:
      - observatory-instruments
      summary: replace the description of the Instrument specified by the 'instrumentId'
      operationId: InstrumentResource_replaceInstrumentDescription
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/frequencyCoverage:
    put:
      tags:
      - observatory-instruments
      summary: replace the frequencyCoverage of the Instrument specified by the 'instrumentId'
      operationId: InstrumentResource_replaceInstrumentFrequencyCoverage
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpectralWindowSetup'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/kind:
    put:
      tags:
      - observatory-instruments
      summary: "replace the 'kind' of the Instrument specified by the 'instrumentId';\
        \ one-of CONTINUUM, SPECTROSCOPIC"
      operationId: InstrumentResource_replaceInstrumentKind
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/name:
    put:
      tags:
      - observatory-instruments
      summary: replace the name of the Instrument specified by the 'subId'
      operationId: InstrumentResource_replaceInstrumentName
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/reference:
    put:
      tags:
      - observatory-instruments
      summary: replace the reference (external URL) of the Instrument specified by
        the 'instrumentId'
      operationId: InstrumentResource_replaceInstrumentReference
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/instruments/{instrumentId}/wikiId:
    put:
      tags:
      - observatory-instruments
      summary: replace the wikiId of the Instrument specified by the 'instrumentId'
      operationId: InstrumentResource_replaceInstrumentWikiId
      parameters:
      - name: instrumentId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes:
    get:
      tags:
      - observatory-telescopes
      summary: "get all Telescope identifiers associated with the given Observatory,\
        \ optionally provide a name to find a specific Telescope"
      operationId: TelescopeResource_getObservatoryTelescopes
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - observatory-telescopes
      summary: create a new Telescope and add it to the given Observatory
      operationId: TelescopeResource_createAndAddTelescopeToObservatory
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telescope'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telescope'
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}:
    get:
      tags:
      - observatory-telescopes
      summary: get the Telescope specified by the 'telescopeId' associated with the
        given Observatory
      operationId: TelescopeResource_getTelescope
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Telescope'
    delete:
      tags:
      - observatory-telescopes
      summary: "remove the Telescope specified by the 'telescopeId' from the given\
        \ Observatory, also removes Telescope entity from the database"
      operationId: TelescopeResource_removeTelescopeFromObservatory
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location:
    put:
      tags:
      - observatory-telescopes
      summary: update the location of the Telescope specified by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeLocation
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeocentricPoint'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/coordinateSystem:
    put:
      tags:
      - observatory-telescopes
      summary: update the coordinate system of the location of the Telescope specified
        by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeLocationCoordinateSystem
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/x:
    put:
      tags:
      - observatory-telescopes
      summary: update the x coordinate of the location of the Telescope specified
        by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeLocationX
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealQuantity'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/xyz:
    put:
      tags:
      - observatory-telescopes
      summary: "update the x,y and z coordinates of the location of the Telescope\
        \ specified by 'telescopeId'"
      operationId: TelescopeResource_updateTelescopeLocationXYZ
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RealQuantity'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/y:
    put:
      tags:
      - observatory-telescopes
      summary: update the y coordinate of the location of the Telescope specified
        by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeLocationY
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealQuantity'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/location/z:
    put:
      tags:
      - observatory-telescopes
      summary: update the z coordinate of the location of the Telescope specified
        by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeLocationZ
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealQuantity'
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/name:
    put:
      tags:
      - observatory-telescopes
      summary: update the name of the Telescope specified by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeName
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/observatories/{observatoryId}/telescopes/{telescopeId}/wikiId:
    put:
      tags:
      - observatory-telescopes
      summary: update the wikiId of the Telescope specified by 'telescopeId'
      operationId: TelescopeResource_updateTelescopeWikiId
      parameters:
      - name: observatoryId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: telescopeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/organizations:
    get:
      tags:
      - organizations
      summary: get all Organizations stored in the database
      operationId: OrganizationResource_getOrganizations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - organizations
      summary: create a new Organization in the database
      operationId: OrganizationResource_createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /pst/api/organizations/{id}:
    get:
      tags:
      - organizations
      summary: get the Organization specified by the 'id'
      operationId: OrganizationResource_getOrganization
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags:
      - organizations
      summary: delete the Organization specified by the 'id' from the database
      operationId: OrganizationResource_deleteOrganization
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/organizations/{id}/address:
    put:
      tags:
      - organizations
      summary: update an Organization's address
      operationId: OrganizationResource_updateOrganisationAddress
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/organizations/{id}/ivoId:
    put:
      tags:
      - organizations
      summary: update an Organization's ivoId
      operationId: OrganizationResource_updateOrganisationIvoId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/organizations/{id}/name:
    put:
      tags:
      - organizations
      summary: update an Organization's name
      operationId: OrganizationResource_updateOrganisationName
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/organizations/{id}/wikiId:
    put:
      tags:
      - organizations
      summary: update an Organization's wikiId
      operationId: OrganizationResource_updateOrganisationWikiId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/people:
    get:
      tags:
      - people
      summary: "get People from the database, optionally provide a name to find all\
        \ the people with that name"
      operationId: PersonResource_getPeople
      parameters:
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - people
      summary: create a new Person in the database
      operationId: PersonResource_createPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /pst/api/people/{id}:
    get:
      tags:
      - people
      summary: get the specified Person
      operationId: PersonResource_getPerson
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      tags:
      - people
      summary: delete the Person specified by the 'id' from the database
      operationId: PersonResource_deletePerson
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/people/{id}/eMail:
    put:
      tags:
      - people
      summary: update a Person's email address
      operationId: PersonResource_updateEMail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/people/{id}/fullName:
    put:
      tags:
      - people
      summary: update a Person's full name
      operationId: PersonResource_updateFullName
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/people/{id}/orcidId:
    put:
      tags:
      - people
      summary: update a Person's orcid ID
      operationId: PersonResource_updateOrcidId
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/proposalCycles:
    get:
      tags:
      - proposalCycles
      summary: List the ProposalCycles
      operationId: ProposalCyclesResource_getProposalCycles
      parameters:
      - name: includeClosed
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
  /pst/api/proposalCycles/{cycleCode}:
    get:
      tags:
      - proposalCycles
      summary: Get proposal cycle
      operationId: ProposalCyclesResource_getProposalCycle
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalCycle'
  /pst/api/proposalCycles/{cycleCode}/TAC:
    get:
      tags:
      - proposalCycles
      summary: Get the time allocation committee
      operationId: ProposalCyclesResource_getTAC
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TAC'
  /pst/api/proposalCycles/{cycleCode}/allocatedProposals:
    get:
      tags:
      - proposalCycles
      summary: "get identifiers for all the AllocatedProposals in the given ProposalCycle,\
        \ optionally provide a proposal title to get a specific identifier "
      operationId: ProposalCyclesResource_getAllocatedProposalsFromCycle
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: title
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    put:
      tags:
      - proposalCycles
      summary: upgrade a proposal under review to an allocated proposal
      operationId: ProposalCyclesResource_allocateProposalToCycle
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposalCycles/{cycleCode}/allocatedProposals/{allocatedId}:
    post:
      tags:
      - proposalCycles
      summary: add an AllocationBlock to the specific AllocatedProposal
      operationId: ProposalCyclesResource_addAllocatedBlockToAllocatedProposal
      parameters:
      - name: allocatedId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocatedBlock'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatedBlock'
  /pst/api/proposalCycles/{cycleCode}/dates:
    get:
      tags:
      - proposalCycles
      summary: Get the dates associated with a given ProposalCycle
      operationId: ProposalCyclesResource_getProposalCycleDates
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalCycleDates'
  /pst/api/proposalCycles/{cycleCode}/grades:
    get:
      tags:
      - proposalCycles
      summary: List the possible grades of the given ProposalCycle
      operationId: ProposalCyclesResource_getCycleAllocationGrades
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
  /pst/api/proposalCycles/{cycleCode}/grades/{gradeId}:
    get:
      tags:
      - proposalCycles
      summary: get the specific grade associated with the given ProposalCycle
      operationId: ProposalCyclesResource_getCycleAllocatedGrade
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: gradeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocationGrade'
  /pst/api/proposalCycles/{cycleCode}/proposalsInReview:
    get:
      tags:
      - proposalCycles
      summary: List the identifiers for the Proposals under review
      operationId: ProposalCyclesResource_getReviewedProposals
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: title
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposalCycles
      summary: upgrade a submitted proposal to a proposal under review
      operationId: ProposalCyclesResource_submitProposalForReview
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewedProposal'
      responses:
        "200":
          description: OK
  /pst/api/proposalCycles/{cycleCode}/proposalsInReview/{reviewCode}:
    get:
      tags:
      - proposalCycles
      summary: get a specific proposal under review
      operationId: ProposalCyclesResource_getReviewedProposal
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: reviewCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewedProposal'
    post:
      tags:
      - proposalCycles
      summary: add new review of proposal
      operationId: ProposalCyclesResource_submitReviewOfProposal
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: reviewCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalReview'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalReview'
  /pst/api/proposalCycles/{cycleCode}/submittedProposals:
    get:
      tags:
      - proposalCycles
      summary: list the SubmittedProposals
      operationId: ProposalCyclesResource_getSubmittedProposals
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: title
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    put:
      tags:
      - proposalCycles
      summary: submit a proposal
      operationId: ProposalCyclesResource_submitProposal
      parameters:
      - name: cycleCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposalCycles/{cycleId}/availableResources:
    get:
      tags:
      - proposalCycles-availableResources
      summary: get all the Resources associated with the given ProposalCycle
      operationId: AvailableResourcesResource_getCycleAvailableResources
      parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
  /pst/api/proposalCycles/{cycleId}/availableResources/types:
    get:
      tags:
      - proposalCycles-availableResources
      summary: get all the ResourceTypes associated with the given ProposalCycle
      operationId: AvailableResourcesResource_getCycleResourceTypes
      parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
  /pst/api/proposalCycles/{cycleId}/availableResources/types/{typeId}:
    get:
      tags:
      - proposalCycles-availableResources
      summary: get the ResourceType specified by 'typeId'
      operationId: AvailableResourcesResource_getCycleResourceType
      parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: typeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceType'
  /pst/api/proposalCycles/{cycleId}/observingModes:
    get:
      tags:
      - proposalCycles-observingModes
      summary: get all the ObservingMode identifiers associated with the given ProposalCycle
      operationId: ObservingModeResource_getCycleObservingModes
      parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
  /pst/api/proposalCycles/{cycleId}/observingModes/{modeId}:
    get:
      tags:
      - proposalCycles-observingModes
      summary: get the ObservingMode specified by 'modeId'
      operationId: ObservingModeResource_getCycleObservingMode
      parameters:
      - name: cycleId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: modeId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservingMode'
  /pst/api/proposals:
    get:
      tags:
      - proposals
      summary: "get the synopsis for each Proposal in the database, optionally provide\
        \ an investigator name and/or a proposal title to see specific proposals"
      operationId: ProposalResource_getProposals
      parameters:
      - name: investigatorName
        in: query
        schema:
          type: string
      - name: title
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProposalSynopsis'
    post:
      tags:
      - proposals
      summary: create a new Proposal in the database
      operationId: ProposalResource_createObservingProposal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservingProposal'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservingProposal'
  /pst/api/proposals/{proposalCode}:
    get:
      tags:
      - proposals
      summary: get the Proposal specified by the 'proposalCode'
      operationId: ProposalResource_getObservingProposal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: get a single Proposal specified by the code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservingProposal'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - default-roles-orppst
    delete:
      tags:
      - proposals
      summary: remove the ObservingProposal specified by the 'proposalCode'
      operationId: ProposalResource_deleteObservingProposal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/fields:
    get:
      tags:
      - proposals
      summary: "get the list of ObjectIdentifiers for the Fields associated with the\
        \ given ObservingProposal, optionally provide a name as a query to get that\
        \ particular Fields's identifier"
      operationId: ProposalResource_getFields
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: fieldName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals
      summary: add a new Field to the given ObservingProposal
      operationId: ProposalResource_addNewField
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
  /pst/api/proposals/{proposalCode}/fields/{fieldId}:
    delete:
      tags:
      - proposals
      summary: remove the Field specified by 'id' from the given ObservingProposal
      operationId: ProposalResource_removeField
      parameters:
      - name: fieldId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/investigators:
    get:
      tags:
      - proposals-investigators
      summary: "get the list of ObjectIdentifiers for the Investigators associated\
        \ with the given ObservingProposal, optionally provide a name as a query to\
        \ get that particular Investigator's identifier"
      operationId: InvestigatorResource_getInvestigators
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: fullName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals-investigators
      summary: "add a new Investigator, using an existing Person, to the ObservationProposal\
        \ specified"
      operationId: InvestigatorResource_addPersonAsInvestigator
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Investigator'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigator'
  /pst/api/proposals/{proposalCode}/investigators/{investigatorId}:
    get:
      tags:
      - proposals-investigators
      summary: get the Investigator specified by the 'id' associated with the given
        ObservingProposal
      operationId: InvestigatorResource_getInvestigator
      parameters:
      - name: investigatorId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigator'
    delete:
      tags:
      - proposals-investigators
      summary: remove the Investigator specified by 'id' from the ObservingProposal
        identified by 'proposalCode'
      operationId: InvestigatorResource_removeInvestigator
      parameters:
      - name: investigatorId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/investigators/{investigatorId}/forPhD:
    put:
      tags:
      - proposals-investigators
      summary: change the 'forPhD' status of the Investigator specified by the 'id'
      operationId: InvestigatorResource_changeInvestigatorForPhD
      parameters:
      - name: investigatorId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/investigators/{investigatorId}/kind:
    put:
      tags:
      - proposals-investigators
      summary: change the 'kind' ('PI' or 'COI') of the Investigator specified by
        the 'id'
      operationId: InvestigatorResource_changeInvestigatorKind
      parameters:
      - name: investigatorId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigatorKind'
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/justifications/{which}:
    get:
      tags:
      - proposals
      summary: get the technical or scientific justification associated with the ObservingProposal
        specified by 'proposalCode'
      operationId: ProposalResource_getJustification
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: which
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Justification'
    put:
      tags:
      - proposals
      summary: update a technical or scientific Justification in the ObservingProposal
        specified by the 'proposalCode'
      operationId: ProposalResource_updateJustification
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: which
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Justification'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Justification'
  /pst/api/proposals/{proposalCode}/kind:
    get:
      tags:
      - proposals
      summary: get the 'kind' of ObservingProposal specified by the 'proposalCode
      operationId: ProposalResource_getObservingProposalKind
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalKind'
    put:
      tags:
      - proposals
      summary: "change the 'kind' of the ObservingProposal specified, one-of: STANDARD,\
        \ TOO, SURVEY"
      operationId: ProposalResource_changeKind
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations:
    get:
      tags:
      - proposals-observations
      summary: "get the list of ObjectIdentifiers for the Observations associated\
        \ with the given ObservingProposal, optionally provide a srcName as a query\
        \ to get that particular Observation's identifier"
      operationId: ObservationResource_getObservations
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: srcName
        in: query
        schema:
          type: string
      - name: type
        in: query
        schema:
          $ref: '#/components/schemas/ObsType'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals-observations
      summary: add a new Observation to the given ObservingProposal
      operationId: ObservationResource_addNewObservation
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
  /pst/api/proposals/{proposalCode}/observations/{observationId}:
    get:
      tags:
      - proposals-observations
      summary: get the Observation specified by the DB id belonging to the given proposal
      operationId: ObservationResource_getObservation
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
    delete:
      tags:
      - proposals-observations
      summary: remove the Observation specified by 'observationId' from the given
        ObservingProposal
      operationId: ObservationResource_removeObservation
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations/{observationId}/constraints:
    get:
      tags:
      - proposals-observations
      summary: get the list of Constraints for the given Observation in the given
        ObservingProposal
      operationId: ObservationResource_getConstraints
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObservingConstraint'
    post:
      tags:
      - proposals-observations
      summary: add a new Constraint to the Observation specified by 'id' in the given
        ObservingProposal
      operationId: ObservationResource_addNewConstraint
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservingConstraint'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservingConstraint'
  /pst/api/proposals/{proposalCode}/observations/{observationId}/constraints/{constraintId}:
    get:
      tags:
      - proposals-observations
      summary: get the constraint referenced by the 'constraintId' for the given observation
      operationId: ObservationResource_getConstraint
      parameters:
      - name: constraintId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservingConstraint'
    delete:
      tags:
      - proposals-observations
      summary: remove the specified Constraint from the Observation of the given ObservationProposal
      operationId: ObservationResource_removeConstraint
      parameters:
      - name: constraintId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations/{observationId}/field:
    put:
      tags:
      - proposals-observations
      summary: replace the Field of the given Observation for the given ObservingProposal
      operationId: ObservationResource_replaceField
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations/{observationId}/target:
    put:
      tags:
      - proposals-observations
      summary: replace the Target of the Observation for the given ObservingProposal
      operationId: ObservationResource_replaceTarget
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations/{observationId}/technicalGoal:
    put:
      tags:
      - proposals-observations
      summary: replace the TechnicalGoal of the given Observation for the given ObservingProposal
      operationId: ObservationResource_replaceTechnicalGoal
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnicalGoal'
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/observations/{observationId}/timingWindows/{timingWindowId}:
    put:
      tags:
      - proposals-observations
      summary: replaces the timing window referenced by 'timingWindowId' for the given
        observation
      operationId: ObservationResource_replaceTimingWindow
      parameters:
      - name: observationId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: timingWindowId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimingWindow'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimingWindow'
  /pst/api/proposals/{proposalCode}/relatedProposals:
    put:
      tags:
      - proposals
      summary: add a RelatedProposal to the ObservingProposal specified by the 'proposalCode'
      operationId: ProposalResource_addRelatedProposal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              format: int64
              type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/summary:
    put:
      tags:
      - proposals
      summary: replace the summary of an ObservingProposal
      operationId: ProposalResource_replaceSummary
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/supportingDocuments:
    get:
      tags:
      - proposals-supportingDocuments
      summary: "get the list of ObjectIdentifiers for the SupportingDocuments associated\
        \ with the given ObservingProposal, optionally provide a title as a query\
        \ to get that particular SupportingDocument's identifier"
      operationId: SupportingDocumentResource_getSupportingDocuments
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: title
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals-supportingDocuments
      summary: upload a new SupportingDocument to the ObservingProposal specified
      operationId: SupportingDocumentResource_uploadSupportingDocument
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  $ref: '#/components/schemas/UploadItemSchema'
                title:
                  type: string
            encoding:
              title:
                contentType: application/json
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportingDocument'
  /pst/api/proposals/{proposalCode}/supportingDocuments/{id}:
    get:
      tags:
      - proposals-supportingDocuments
      summary: get the SupportingDocument specified by the 'id' for the given ObservingProposal
      operationId: SupportingDocumentResource_getSupportingDocument
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportingDocument'
    put:
      tags:
      - proposals-supportingDocuments
      summary: replace the supporting document with a new file upload
      operationId: SupportingDocumentResource_replaceSupportingDocument
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  $ref: '#/components/schemas/UploadItemSchema'
      responses:
        "200":
          description: OK
    delete:
      tags:
      - proposals-supportingDocuments
      summary: remove the SupportingDocument specified by 'id' from the given ObservingProposal
      operationId: SupportingDocumentResource_removeSupportingDocument
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/supportingDocuments/{id}/get-file:
    get:
      tags:
      - proposals-supportingDocuments
      summary: download the document file associated with the SupportingDocument 'id'
      operationId: SupportingDocumentResource_downloadSupportingDocument
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/supportingDocuments/{id}/title:
    put:
      tags:
      - proposals-supportingDocuments
      summary: replace the title of the SupportingDocument specified by the 'id'
      operationId: SupportingDocumentResource_replaceSupportingDocumentTitle
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportingDocument'
  /pst/api/proposals/{proposalCode}/targets:
    get:
      tags:
      - proposals
      summary: "get the list of ObjectIdentifiers for the targets associated with\
        \ the given ObservingProposal, optionally provide a sourceName as a query\
        \ to get that particular Observation's identifier"
      operationId: ProposalResource_getTargets
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: sourceName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals
      summary: add a new Target to the given ObservingProposal
      operationId: ProposalResource_addNewTarget
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
  /pst/api/proposals/{proposalCode}/targets/{targetId}:
    get:
      tags:
      - proposals
      summary: get a specific Target for the given ObservingProposal
      operationId: ProposalResource_getTarget
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: targetId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
    delete:
      tags:
      - proposals
      summary: remove the Target specified by 'id' from the given ObservingProposal
      operationId: ProposalResource_removeTarget
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: targetId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/technicalGoals:
    get:
      tags:
      - proposals-technicalGoals
      summary: get the list of TechnicalGoals associated with the given ObservingProposal
      operationId: TechnicalGoalResource_getTechnicalGoals
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectIdentifier'
    post:
      tags:
      - proposals-technicalGoals
      summary: add a new technical goal to the given ObservingProposal
      operationId: TechnicalGoalResource_addTechnicalGoal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnicalGoal'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalGoal'
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}:
    get:
      tags:
      - proposals-technicalGoals
      summary: get a specific TechnicalGoal for the given ObservingProposal
      operationId: TechnicalGoalResource_getTechnicalGoal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalGoal'
    delete:
      tags:
      - proposals-technicalGoals
      summary: remove the Technical Goal specified by 'technicalGoalId' from the given
        ObservingProposal
      operationId: TechnicalGoalResource_removeTechnicalGoal
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/performanceParameters:
    put:
      tags:
      - proposals-technicalGoals
      summary: replace the PerformanceParameters of the TechnicalGoal referred to
        by the 'technicalGoalId
      operationId: TechnicalGoalResource_replacePerformanceParameters
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceParameters'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceParameters'
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum:
    post:
      tags:
      - proposals-technicalGoals
      summary: add a new spectral window to the TechnicalGoal referred to by the 'technicalGoalId'
      operationId: TechnicalGoalResource_addSpectrum
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScienceSpectralWindow'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScienceSpectralWindow'
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{windowIndex}:
    put:
      tags:
      - proposals-technicalGoals
      summary: replace the Spectrum at 'windowIndex' of the TechnicalGoal referred
        to by the 'technicalGoalId
      operationId: TechnicalGoalResource_replaceSpectrum
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: windowIndex
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScienceSpectralWindow'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScienceSpectralWindow'
    delete:
      tags:
      - proposals-technicalGoals
      summary: remove the Spectrum at 'windowIndex' of the TechnicalGoal referred
        to by the 'technicalGoalId
      operationId: TechnicalGoalResource_removeSpectrum
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: windowIndex
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{windowIndex}/expectedSpectralLine:
    post:
      tags:
      - proposals-technicalGoals
      summary: add an expected spectral line to the spectral window at 'windowIndex'
        for the given TechnicalGoal
      operationId: TechnicalGoalResource_addExpectedSpectralLine
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: windowIndex
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpectedSpectralLine'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpectedSpectralLine'
  /pst/api/proposals/{proposalCode}/technicalGoals/{technicalGoalId}/spectrum/{windowIndex}/expectedSpectralLine/{lineIndex}:
    delete:
      tags:
      - proposals-technicalGoals
      summary: remove the expected spectral line at 'lineIndex' from the spectral
        window at 'windowIndex' of the given TechnicalGoal
      operationId: TechnicalGoalResource_removeExpectedSpectralLine
      parameters:
      - name: lineIndex
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: technicalGoalId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: windowIndex
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /pst/api/proposals/{proposalCode}/title:
    get:
      tags:
      - proposals
      summary: get the title of the ObservingProposal specified by 'proposalCode'
      operationId: ProposalResource_getObservingProposalTitle
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
    put:
      tags:
      - proposals
      summary: change the title of an ObservingProposal
      operationId: ProposalResource_replaceTitle
      parameters:
      - name: proposalCode
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /pst/api/simbad:
    get:
      tags:
      - simbad
      summary: search the SIMBAD online catalogue for the given target name
      operationId: SimbadResource_simbadFindTarget
      parameters:
      - name: targetName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimbadTargetResult'
  /pst/api/spaceFrames/{frameCode}:
    get:
      tags:
      - standard Space frames
      summary: get a space frame
      operationId: SpaceFrameResource_getSpaceFrame
      parameters:
      - name: frameCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceFrame'
  /pst/api/spaceSystems/{frameCode}:
    get:
      tags:
      - standard Space Coordinate Systems
      summary: get a space system
      operationId: SpaceSystemResource_getSpaceSystem
      parameters:
      - name: frameCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceSys'
  /pst/api/subjectMap/{id}:
    get:
      tags:
      - mapping between AAI user ids and People
      summary: get the SubjectMap specified by the 'id'
      operationId: SubjectMapResource_subjectMap
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectMap'
components:
  schemas:
    AllocatedBlock:
      description: A block of resources that have been allocated
      type: object
      properties:
        resource:
          description: the amount of resource
          type: object
          allOf:
          - $ref: '#/components/schemas/Resource'
        mode:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/ObservingMode'
        grade:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/AllocationGrade'
    AllocatedProposal:
      description: an instance of a proposal that is allocated observing time
      type: object
      properties:
        allocation:
          description: what is allocated to the proposal
          type: array
          items:
            $ref: '#/components/schemas/AllocatedBlock'
        submitted:
          description: A reference to - the proposal
          type: object
          allOf:
          - $ref: '#/components/schemas/SubmittedProposal'
    AllocationGrade:
      description: The final grade given by the TAC
      type: object
      properties:
        name:
          description: the name of the grade
          type: string
        description:
          description: what this grade means
          type: string
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    AstroCoordSystem:
      description: The AstroCoordSystem object holds a collection of component coordinate
        system descriptions across all represented physical domains.
      type: object
      properties:
        xmlId:
          type: string
        coordSys:
          description: "Coordinate system description for each physical domain (Space,\
            \ Time, etc)."
          type: array
          items:
            $ref: '#/components/schemas/PhysicalCoordSys'
    AvailableResources:
      description: The list of resources that are available
      type: object
      properties:
        resources:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/Resource'
    Axis:
      description: "The abstract parent class for all coordinate axis types. We provide\
        \ concrete classes for the most common types of data, Continuous, Binned,\
        \ and Discrete, but allow extension for other types as needed."
      type: object
      properties:
        name:
          description: "Freeform string, provides the name or label for the axis."
          type: string
    Backend:
      description: a processing backend /pipeline- e.g. correlator
      type: object
      properties:
        name:
          description: the backend name
          type: string
        parallel:
          description: is capable of being run at same time as other backends
          type: boolean
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    BinnedAxis:
      description: "Axis description for binned data, where values along the axis\
        \ correspond to a bin number."
      type: object
      properties:
        name:
          description: "Freeform string, provides the name or label for the axis."
          type: string
        length:
          format: int32
          description: "The length, or number of bins, along the axis."
          type: integer
    BinnedCoordinate:
      description: "Coordinate value type specifically intended for binned data (e.g.:\
        \ pixel indexes)."
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
        cval:
          format: int32
          description: "The binned coordinate value, expressed as an integer. e.g.:\
            \ bin number, pixel index."
          type: integer
    CalibrationObservation:
      description: An observation that is intended for calibration
      type: object
      properties:
        constraints:
          description: any constraints on the observation
          type: array
          items:
            $ref: '#/components/schemas/ObservingConstraint'
        target:
          description: A reference to - The actual target of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Target'
        field:
          description: A reference to - The Field for the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Field'
        technicalGoal:
          description: A reference to - The technical goals of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/TechnicalGoal'
        intent:
          description: The use of the calibration observation
          type: string
          allOf:
          - $ref: '#/components/schemas/CalibrationTarget_intendedUse'
    CalibrationTarget_intendedUse:
      description: ""
      enum:
      - AMPLITUDE
      - ATMOSPHERIC
      - BANDPASS
      - PHASE
      - POINTING
      - FOCUS
      - POLARIZATION
      - DELAY
      type: string
    CartesianCoordSpace:
      description: "Spatial domain, three-dimensional cartesian coordinate space.\
        \ The particulars of the axis descriptions depend on the physical constraints\
        \ of the instance. In Appendix B, we provide the description of a Standard\
        \ Cartesian Coordinate Space instance which applies to many Astronomical cases,\
        \ and may be referenced in serializations."
      type: object
      properties:
        axis:
          type: array
          items:
            $ref: '#/components/schemas/Axis'
          writeOnly: true
    CelestialTarget:
      description: The basic target setup for a celestial Target.
      type: object
      properties:
        xmlId:
          type: string
        sourceName:
          description: A common name for the source
          type: string
        sourceCoordinates:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/EquatorialPoint'
        positionEpoch:
          description: the epoch at which the position was measured
          type: object
          allOf:
          - $ref: '#/components/schemas/Epoch'
        pmRA:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        pmDec:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        parallax:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        sourceVelocity:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    CommitteeMember:
      description: a member of the TAC
      type: object
      properties:
        role:
          description: ""
          type: string
          allOf:
          - $ref: '#/components/schemas/TacRole'
        member:
          description: A reference to - the member
          type: object
          allOf:
          - $ref: '#/components/schemas/Reviewer'
    ContinuousAxis:
      description: "Axis description for continuous data. This object describes the\
        \ domain for a particular axis of the domain space. It allows for the specification\
        \ of the legal domain range (min,max), and a flag indicating if the axis is\
        \ cyclic."
      type: object
      properties:
        name:
          description: "Freeform string, provides the name or label for the axis."
          type: string
        domainMin:
          description: "Minimum extent of the axis domain space. If not provided,\
            \ the domain space is considered to have no lower bound (-INFINITY)."
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
        domainMax:
          description: "Maximum extent of the axis domain space. If not provided,\
            \ the domain space is considered to have no upper bound (+INFINITY)."
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
        cyclic:
          description: "Flag indicating if the axis is cyclic in nature. If not provided,\
            \ it is assumed to be FALSE."
          type: boolean
    CoordFrame:
      description: "This is the abstract, empty, base class for all coordinate frames.\
        \ Coordinate frames provide metadata associated with the coordinate domain\
        \ space. Typically, this will be related to the origin and orientation of\
        \ the axes, but might include any metadata which pertains to the definition\
        \ of the domain."
      type: object
    CoordSpace:
      description: "This object defines a domain space. i.e.: it describes the set\
        \ of possible coordinate values."
      type: object
      properties:
        axis:
          description: Describes an axis of the coordinate space.
          type: array
          items:
            $ref: '#/components/schemas/Axis'
    CoordSys:
      description: Abstract head of the coordinate system object tree.
      type: object
      properties:
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    Coordinate:
      description: "Abstract base class for the Coordinate data types which represent\
        \ an absolute location within a coordinate space. Coordinates MUST refer to\
        \ a coordinate system, providing additional metadata relevant to interpreting\
        \ the coordinate value, and its representation."
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
    CustomRefLocation:
      description: A custom reference location in phase space (position and velocity).
        Position and velocity are given as coordinates with an associated SpaceFrame.
        An epoch MAY be provided to further refine the location.
      type: object
      properties:
        epoch:
          description: Epoch for the reference location.
          type: object
          allOf:
          - $ref: '#/components/schemas/Epoch'
        position:
          description: The spatial coordinates of the reference location.
          type: object
          allOf:
          - $ref: '#/components/schemas/Point1'
        velocity:
          description: The velocity of the reference location.
          type: object
          allOf:
          - $ref: '#/components/schemas/Point1'
    Date:
      format: date
      type: string
      example: 2022-03-10
    DiscreteSetAxis:
      description: "Axis type specifically intended for enumerated coordinates. Since\
        \ the content and nature of this axis type is heavily dependent on the use\
        \ case, we define no additional metadata here. Extensions of this type may\
        \ include additional metadata relevant to the particular use cases. For example,\
        \ an extension could include the allowed set of values."
      type: object
      properties:
        name:
          description: "Freeform string, provides the name or label for the axis."
          type: string
    Ellipse:
      description: Specialization of a Field for an elliptical map.
      type: object
      properties:
        xmlId:
          type: string
        name:
          description: ""
          type: string
        semiMajor:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        semiMinor:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        pAMajor:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    Epoch:
      description: "We define epoch as a primitive data type with the expected form\
        \ '$type$year' where type = 'J' or 'B' for Julian or Besselian respectively,\
        \ and year is expressed as a decimal year. e.g.: 'B1950', 'J2000.0'"
      type: object
      properties:
        value:
          type: string
    EquatorialPoint:
      description: A Point on the Unit Sphere
      type: object
      properties:
        lon:
          description: The longitudinal angle
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        lat:
          description: The latitudinal angle
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    ExpectedSpectralLine:
      description: Brief description of a spectral line.
      type: object
      properties:
        restFrequency:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        transition:
          description: ""
          type: string
        splatalogId:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/StringIdentifier'
        description:
          description: ""
          type: string
    Field:
      description: Definition of an observing field pointing
      type: object
      properties:
        name:
          description: ""
          type: string
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    FileUpload:
      type: object
    GenericCoordSpace:
      description: "Generic, one-dimensional coordinate space suitable for use with\
        \ most non-spatial properties. In Appendix B, we provide the description of\
        \ a Standard 1D Coordinate Space instance which may be referenced in serializations."
      type: object
      properties:
        axis:
          description: Describes an axis of the coordinate space.
          type: array
          items:
            $ref: '#/components/schemas/Axis'
    GenericFrame:
      description: "The generic coordinate frame is for cases where a domain-specific\
        \ frame (e.g.: Space, Time), is not required, but the relevant reference metadata\
        \ is still needed (e.g.: for Redshift or Spectral data)"
      type: object
      properties:
        refPosition:
          description: "Spatial location in phase space (position and velocity) at\
            \ which the observed value is considered to have been taken. This will\
            \ typically be given by a standard reference position, but we allow for\
            \ custom locations as well."
          type: object
          allOf:
          - $ref: '#/components/schemas/RefLocation'
        planetaryEphem:
          description: "A planetary ephemeris MAY be provided, and SHOULD be provided\
            \ whenever appropriate, to indicate which solar system ephemeris was used.\
            \ If needed, but not provided, it is assumed to be 'DE405'"
          type: string
    GenericSys:
      description: "Specialized coordinate system for generic, one-dimensional domains\
        \ not covered by other, more concrete objects. If a CoordSpace is not provided,\
        \ it is assumed to be represented by a Standard 1-Dimensional Coordinate Space\
        \ as described in Appendix B."
      type: object
      properties:
        xmlId:
          type: string
        coordSpace:
          description: Description of the coordinate space occupied by the property.
          type: object
          allOf:
          - $ref: '#/components/schemas/PhysicalCoordSpace'
    GeocentricPoint:
      description: ITRS earth coordinate
      type: object
      properties:
        x:
          description: cartesian x
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        "y":
          description: catesian y (+ve in east)
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        z:
          description: cartesian z
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    Handedness:
      description: "The handedness of a coordinate space. For most cases, this will\
        \ be a fixed value in the specification of the coordinate space. We provide\
        \ this element to allow this flexibility when needed. In this document, it\
        \ is used in the Pixel domain."
      enum:
      - LEFT
      - RIGHT
      type: string
    ISOTime:
      description: "Extension of TimeInstant for time expressed as a structured datetime\
        \ string. The string representation of a datetime value should follow the\
        \ FITS convention for representing dates (Hanish and Farris et al, 2001).\
        \ The FITS standard is effectively ISO8601 format without the 'Z' tag to indicate\
        \ UTC: YYYY-MM-DD['T'hh:mm:ss[.SSS]]. The TimeScale is provided in the associated\
        \ TimeFrame."
      type: object
      properties:
        date:
          description: The ISOTime coordinate value.
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
    Identifier:
      description: something that an identifier that can be used as a key for lookup
        of an entity that is *outside this datamodel*
      type: object
      properties:
        value:
          type: string
    Instrument:
      description: "An instrument that can be attached to a telescope - e.g. CCD,\
        \ Radio Receiver"
      type: object
      properties:
        name:
          description: the instrument name - human readable
          type: string
        description:
          description: short human readable description
          type: string
        wikiId:
          description: the wikidata id for the Instrument
          type: object
          allOf:
          - $ref: '#/components/schemas/WikiDataId'
        reference:
          description: a URL that points to a more detailed description of the instrument
          type: string
        kind:
          description: the kind of instrument
          type: string
          allOf:
          - $ref: '#/components/schemas/InstrumentKind'
        frequencyCoverage:
          description: the frequency range that the instrument covers
          type: object
          allOf:
          - $ref: '#/components/schemas/SpectralWindowSetup'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    InstrumentKind:
      description: ""
      enum:
      - CONTINUUM
      - SPECTROSCOPIC
      type: string
    IntIdentifier:
      description: an integer identifier
      type: object
      properties:
        value:
          type: string
    IntegerQuantity:
      description: An integer number with a unit. Examples of such units that can
        be used for attributes are bit/byte/kiloByte etc.
      type: object
      properties:
        unit:
          description: The unit of this quantity.
          type: object
          allOf:
          - $ref: '#/components/schemas/Unit'
        value:
          format: int32
          description: The integer value of this IntegerQuantity.
          type: integer
    Investigator:
      description: ""
      type: object
      properties:
        type:
          description: the investigator type
          type: string
          allOf:
          - $ref: '#/components/schemas/InvestigatorKind'
        forPhD:
          description: is the investigator making proposal for their PhD
          type: boolean
        person:
          description: A reference to - the investigator
          type: object
          allOf:
          - $ref: '#/components/schemas/Person'
    InvestigatorKind:
      description: ""
      enum:
      - PI
      - COI
      type: string
    Ivorn:
      description: an identifier that can be used as a key to look up in an IVOA registry
        - see https://www.ivoa.net/documents/IVOAIdentifiers/
      type: object
      properties:
        value:
          type: string
    JD:
      description: "Extension of TimeInstant for time expressed in Julian days. Note\
        \ that JD does not properly specify a time stamp unless it is related to a\
        \ time scale and reference position. Precision can easily become an issue\
        \ with JD, as the numbers tend to be large."
      type: object
      properties:
        date:
          format: double
          description: "The JD coordinate value. JD dates are dimensionless, with\
            \ implied units in days."
          type: number
    Justification:
      description: The justification for the proposal. Note that the justification
        is for reading by humans and is not parsed to extract things like source lists
        - that sort of information must be entered in the correct place in the model.
      type: object
      properties:
        text:
          description: the full text of the justification
          type: string
        format:
          description: the format of the text
          type: string
          allOf:
          - $ref: '#/components/schemas/TextFormats'
    MJD:
      description: Extension of TimeInstant for time expressed in Modified Julian
        Days. T(MJD) = T(JD) - 2400000.5.
      type: object
      properties:
        date:
          format: double
          description: "The MJD coordinate value. MJD dates are dimensionless, with\
            \ implied units in days."
          type: number
    ObjectIdentifier:
      type: object
      properties:
        dbid:
          format: int64
          type: integer
        code:
          type: string
        name:
          type: string
    ObsType:
      enum:
      - TargetObservation
      - CalibrationObservation
      type: string
    Observation:
      description: ""
      type: object
      properties:
        constraints:
          description: any constraints on the observation
          type: array
          items:
            $ref: '#/components/schemas/ObservingConstraint'
        target:
          description: A reference to - The actual target of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Target'
        field:
          description: A reference to - The Field for the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Field'
        technicalGoal:
          description: A reference to - The technical goals of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/TechnicalGoal'
    Observatory:
      description: An organisation that can perform astronomical observations
      type: object
      properties:
        xmlId:
          type: string
        name:
          description: The name of the organization
          type: string
        address:
          description: ""
          type: string
        ivoid:
          description: the registry identifier for the organization
          type: object
          allOf:
          - $ref: '#/components/schemas/Ivorn'
        wikiId:
          description: the wikidata id for the Organization
          type: object
          allOf:
          - $ref: '#/components/schemas/WikiDataId'
        telescopes:
          description: the telescopes that the observatory controls
          type: array
          items:
            $ref: '#/components/schemas/Telescope'
        instruments:
          description: the instruments that are available for the telescopes
          type: array
          items:
            $ref: '#/components/schemas/Instrument'
        backends:
          description: the backends that exist
          type: array
          items:
            $ref: '#/components/schemas/Backend'
        arrays:
          description: any arrays of telescopes that typically operate together
          type: array
          items:
            $ref: '#/components/schemas/TelescopeArray'
    ObservingConfiguration:
      description: A particular observation combination that is possible
      type: object
      properties:
        telescope:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Telescope'
        instrument:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Instrument'
        backend:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Backend'
    ObservingConstraint:
      description: a form of constraint on the observation
      type: object
    ObservingMode:
      description: a collection of configs that can be chosen to observe with.
      type: object
      properties:
        name:
          description: ""
          type: string
        description:
          description: ""
          type: string
        configurations:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/ObservingConfiguration'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    ObservingProposal:
      description: a complete proposal
      type: object
      properties:
        title:
          description: the proposal title
          type: string
        summary:
          description: a short summary/abstract of the proposal
          type: string
        kind:
          description: the type of proposal
          type: string
          allOf:
          - $ref: '#/components/schemas/ProposalKind'
        submitted:
          description: whether the proposal is submitted
          type: boolean
        scientificJustification:
          description: scientific justification
          type: object
          allOf:
          - $ref: '#/components/schemas/Justification'
        technicalJustification:
          description: technical justification
          type: object
          allOf:
          - $ref: '#/components/schemas/Justification'
        investigators:
          description: the person(s) making the proposal
          type: array
          items:
            $ref: '#/components/schemas/Investigator'
        relatedProposals:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/RelatedProposal'
        supportingDocuments:
          description: any additional documents
          type: array
          items:
            $ref: '#/components/schemas/SupportingDocument'
        targets:
          description: the targets of the proposal
          type: array
          items:
            $ref: '#/components/schemas/Target'
        fields:
          description: the fields observed in the proposal
          type: array
          items:
            $ref: '#/components/schemas/Field'
        technicalGoals:
          description: the technical goals of the proposal
          type: array
          items:
            $ref: '#/components/schemas/TechnicalGoal'
        observations:
          description: the proposed observations
          type: array
          items:
            $ref: '#/components/schemas/Observation'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    OfferedCycles:
      description: ""
      type: object
      properties:
        cycles:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/ProposalCycle'
    Organization:
      description: An institution that is a collection of people
      type: object
      properties:
        name:
          description: The name of the organization
          type: string
        address:
          description: ""
          type: string
        ivoid:
          description: the registry identifier for the organization
          type: object
          allOf:
          - $ref: '#/components/schemas/Ivorn'
        wikiId:
          description: the wikidata id for the Organization
          type: object
          allOf:
          - $ref: '#/components/schemas/WikiDataId'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    PerformanceParameters:
      description: The parameters required for observation to be useful for the science
        goal
      type: object
      properties:
        desiredAngularResolution:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        desiredLargestScale:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        desiredSensitivity:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        desiredDynamicRange:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        representativeSpectralPoint:
          description: the the point in the EM where these parameters should be evaluated
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    Person:
      description: person connected with the proposal
      type: object
      properties:
        fullName:
          description: The given names for the person
          type: string
        eMail:
          description: an email that can be used to communicate with the person
          type: string
        orcidId:
          description: orcid id see https://orcid.org
          type: object
          allOf:
          - $ref: '#/components/schemas/StringIdentifier'
        homeInstitute:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Organization'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    PhysicalCoordSpace:
      description: Abstract head of coordinate spaces related to physical properties.
      type: object
      properties:
        axis:
          description: Describes an axis of the coordinate space.
          type: array
          items:
            $ref: '#/components/schemas/Axis'
    PhysicalCoordSys:
      description: "Coordinate system description for any physical domain, such as\
        \ Time, Space, Redshift, Temperature, Flux, etc."
      type: object
      properties:
        xmlId:
          type: string
        coordSpace:
          description: Description of the coordinate space occupied by the property.
          type: object
          allOf:
          - $ref: '#/components/schemas/PhysicalCoordSpace'
        frame:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordFrame'
    PhysicalCoordinate:
      description: "The most common type of coordinate value. This type is appropriate\
        \ for any data whose values can be described by an ivoa:Quantity (numeric,\
        \ with unit)."
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
        cval:
          description: This coordinate MUST contain a value expressed as an ivoa:Quantity.
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
    PixelCoordSystem:
      description: The PixelCoordSystem provides a complete description of the pixel
        coordinate space. It SHALL contain one PixelSpace instance describing each
        pixel axis.
      type: object
      properties:
        xmlId:
          type: string
        pixelSpace:
          description: The pixel space completely defines the pixel coordinate axes.
            Each axis MUST be defined as a BinnedAxis type.
          type: object
          allOf:
          - $ref: '#/components/schemas/PixelSpace'
    PixelIndex:
      description: Specialized BinnedCoordinate for the pixel domain for a 1-dimensional
        pixel index. PixelIndex MUST refer to a PixelCoordSystem.
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
        cval:
          format: int32
          description: "The binned coordinate value, expressed as an integer. e.g.:\
            \ bin number, pixel index."
          type: integer
    PixelSpace:
      description: A PixelSpace SHALL include one or more BinnedAxis objects describing
        the pixel coordinate space. A handedness value MAY be provided to specify
        the relative orientation of the axes.
      type: object
      properties:
        handedness:
          description: Specifies the handedness of the coordinate space.
          type: string
          allOf:
          - $ref: '#/components/schemas/Handedness'
        axis:
          type: array
          items:
            $ref: '#/components/schemas/Axis'
          writeOnly: true
    Point:
      description: Single point on the sky
      type: object
      properties:
        xmlId:
          type: string
        name:
          description: ""
          type: string
        centre:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/Point1'
    Point1:
      description: "Multi-dimensional spatial coordinate. The Point MUST refer to\
        \ a spatial coordinate system (SpaceSys). The coordinate values map, in order,\
        \ to the axes described by the associated CoordSpace. Values for unused/undefined\
        \ dimensions need not be provided."
      type: object
      properties:
        axis1:
          description: "Coordinate value along the first axis of the associated coordinate\
            \ space, expressed as an ivoa:Quantity."
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
        axis2:
          description: "Coordinate value along the second axis of the associated coordinate\
            \ space, expressed as an ivoa:Quantity."
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
        axis3:
          description: "Coordinate value along the third axis of the associated coordinate\
            \ space, expressed as an ivoa:Quantity."
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
    PointingConstaint:
      description: A constraint that limits the telescope pointing
      type: object
    PolCoordinate:
      description: "Abstract head of the polarization coordinate types. Current use\
        \ cases only require support for discrete polarization states, however, we\
        \ include this head class to facilitate extension for other types (eg: polarization\
        \ fraction and angle)."
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
    PolState:
      description: Coordinate type for discrete polarization states.
      type: object
      properties:
        coordSys:
          description: "A reference to - Provided additional metadata relevant to\
            \ interpreting the coordinate value; for example, the spatial reference\
            \ position, or time scale, axis descriptions."
          type: object
          allOf:
          - $ref: '#/components/schemas/CoordSys'
        cval:
          description: The coordinate value MUST be from the PolStateEnum enumerated
            set.
          type: string
          allOf:
          - $ref: '#/components/schemas/PolStateEnum'
    PolStateEnum:
      description: "Polarization states: Stokes, Circular, Linear and Vector states"
      enum:
      - I
      - Q
      - U
      - V
      - RR
      - LL
      - RL
      - LR
      - XX
      - YY
      - XY
      - YX
      - PF
      - PP
      - PA
      type: string
    Polygon:
      description: Polygonal map
      type: object
      properties:
        xmlId:
          type: string
        name:
          description: ""
          type: string
        points:
          description: an array of points....
          type: array
          items:
            $ref: '#/components/schemas/EquatorialPoint'
    ProposalCycle:
      description: Defines collection of resources and proposals for a particular
        observing season
      type: object
      properties:
        title:
          description: a human readable description of the cycle
          type: string
        submissionDeadline:
          description: the date by which observing proposals must be submitted to
            be considered for this cycle
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        observationSessionStart:
          description: the start date of the observing cycle
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        observationSessionEnd:
          description: the end date of the observing cycle
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        observingModes:
          description: the possible observing modes offered in the cycle
          type: array
          items:
            $ref: '#/components/schemas/ObservingMode'
        availableResources:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/AvailableResources'
        possibleGrades:
          description: The possible grades that can be allocated for this cycle
          type: array
          items:
            $ref: '#/components/schemas/AllocationGrade'
        tac:
          description: The time allocation committee
          type: object
          allOf:
          - $ref: '#/components/schemas/TAC'
        submittedProposals:
          description: the proposals that have been submitted in this cycle
          type: array
          items:
            $ref: '#/components/schemas/SubmittedProposal'
        reviewedProposals:
          description: the proposals that have been reviewed in this cycle
          type: array
          items:
            $ref: '#/components/schemas/ReviewedProposal'
        allocatedProposals:
          description: the proposals that have been successful and allocated time
          type: array
          items:
            $ref: '#/components/schemas/AllocatedProposal'
        observatory:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Observatory'
    ProposalCycleDates:
      type: object
      properties:
        title:
          type: string
        submissionDeadline:
          $ref: '#/components/schemas/Date'
        observationSessionStart:
          $ref: '#/components/schemas/Date'
        observationSessionEnd:
          $ref: '#/components/schemas/Date'
    ProposalKind:
      description: ""
      enum:
      - STANDARD
      - TOO
      - SURVEY
      type: string
    ProposalReview:
      description: A review of a proposal
      type: object
      properties:
        comment:
          description: Description
          type: string
        score:
          format: double
          description: the review score
          type: number
        technicalFeasibility:
          description: is the proposal technically feasible
          type: boolean
        reviewDate:
          description: the date that the review is submitted
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        reviewer:
          description: A reference to - the reviewer making this review
          type: object
          allOf:
          - $ref: '#/components/schemas/Reviewer'
    ProposalSynopsis:
      type: object
      properties:
        code:
          format: int64
          type: integer
        title:
          type: string
        summary:
          type: string
        kind:
          $ref: '#/components/schemas/ProposalKind'
        submitted:
          type: boolean
    Quantity:
      description: "Meant to represent the value of a numerical physical quantity.\
        \ Can be mapped in VOTables to FIELDrefs and PARAM(ref)s, in which case the\
        \ @unit attribute of those VOTable elements is assumed to be mapped to the\
        \ attribute on the Quantity. Ths is only allowed for these predefined ivoa\
        \ types."
      type: object
      properties:
        unit:
          description: The unit of this quantity.
          type: object
          allOf:
          - $ref: '#/components/schemas/Unit'
    RealQuantity:
      description: A real value with a unit.
      type: object
      properties:
        unit:
          description: The unit of this quantity.
          type: object
          allOf:
          - $ref: '#/components/schemas/Unit'
        value:
          format: double
          description: The real value of this quantity
          type: number
    RefLocation:
      description: "RefLocation defines the origin of the spatial coordinate space.\
        \ This location is represented either by a standard reference position (for\
        \ which the absolute location in phase space is known by definition), or a\
        \ specified point in another Spatial frame. This object is used as the origin\
        \ of the SpaceFrame here, but also to specify the Spatial Reference Position\
        \ (refPosition) associated with other domain Frames. For example, in the Time\
        \ domain, the Spatial Reference Position indicates that the 'time' values\
        \ are the time that the 'event' occured at that location, which might be different\
        \ from the detector location."
      type: object
    RelatedProposal:
      description: a related proposal
      type: object
      properties:
        proposal:
          description: A reference to - the related proposal
          type: object
          allOf:
          - $ref: '#/components/schemas/ObservingProposal'
    Resource:
      description: A resource that will be consumed by allocating an observation from
        a proposal
      type: object
      properties:
        amount:
          format: double
          description: The amount of the resource
          type: number
        type:
          description: A reference to - the type of the resource
          type: object
          allOf:
          - $ref: '#/components/schemas/ResourceType'
    ResourceBlock:
      description: A block of resources that can be allocated
      type: object
      properties:
        resource:
          description: the amount of resource
          type: object
          allOf:
          - $ref: '#/components/schemas/Resource'
        mode:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/ObservingMode'
    ResourceType:
      description: a type of resource
      type: object
      properties:
        name:
          description: the name of the resource type
          type: string
        unit:
          description: ""
          type: string
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    ReviewedProposal:
      description: an instance of a proposal that is in review
      type: object
      properties:
        successful:
          description: the proposal can go on to allocation
          type: boolean
        reviewsCompleteDate:
          description: the date when all the proposals are due
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        reviews:
          description: the reviews
          type: array
          items:
            $ref: '#/components/schemas/ProposalReview'
        submitted:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/SubmittedProposal'
    Reviewer:
      description: assigned to review the proposal
      type: object
      properties:
        person:
          description: A reference to - the person taking on the reviewer role
          type: object
          allOf:
          - $ref: '#/components/schemas/Person'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    ScienceSpectralWindow:
      description: A spectral window for science use.
      type: object
      properties:
        spectralWindowSetup:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/SpectralWindowSetup'
        expectedSpectralLine:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/ExpectedSpectralLine'
    SimbadTargetResult:
      type: object
      properties:
        targetName:
          type: string
        spaceSystemCode:
          type: string
        epoch:
          type: string
        raDegrees:
          format: double
          type: number
        decDegrees:
          format: double
          type: number
    SimultaneityConstraint:
      description: A constraint that requires that two observations occur simultaneously
      type: object
      properties:
        note:
          description: ""
          type: string
        isAvoidConstraint:
          description: ""
          type: boolean
    SolarSystemTarget:
      description: ""
      type: object
      properties:
        xmlId:
          type: string
        sourceName:
          description: A common name for the source
          type: string
    SpaceFrame:
      description: "A SpaceFrame is specified by its reference frame (orientation),\
        \ and a reference position (origin). Currently only standard reference frames\
        \ are allowed. An equinox MUST be provided for pre-ICRS reference frames.\
        \ A planetary ephemeris MAY be provided if relevant. If needed, but not provided,\
        \ it is assumed to be 'DE405'."
      type: object
      properties:
        refPosition:
          description: "The spatial location at which the coordinates are considered\
            \ to have been determined. This model supports locations provided as either\
            \ a standard reference position (e.g. GEOCENTER), or a coordinate specifying\
            \ a custom location (e.g. long, lat, height )."
          type: object
          allOf:
          - $ref: '#/components/schemas/RefLocation'
        spaceRefFrame:
          description: The spatial reference frame. Values MUST be selected from the
            controlled vocabulary at the given URL.
          type: string
        equinox:
          description: "Reference date for the frame, required for pre-ICRS reference\
            \ frames."
          type: object
          allOf:
          - $ref: '#/components/schemas/Epoch'
        planetaryEphem:
          description: Ephemeris file for solar system objects SHOULD be specified
            whenever relevant.
          type: string
    SpaceSys:
      description: "Specialized coordinate system for the Spatial domain. This object\
        \ SHOULD include an appropriate SpaceFrame. In Appendix B, we define two standard\
        \ spatial coordinate space instances (Spherical and Cartesian), which may\
        \ be referenced in serializations. If a CoordSpace is not provided, it is\
        \ assumed to be represented by a Standard Spherical Coordinate Space."
      type: object
      properties:
        xmlId:
          type: string
        coordSpace:
          description: Description of the coordinate space occupied by the property.
          type: object
          allOf:
          - $ref: '#/components/schemas/PhysicalCoordSpace'
    SpectralWindowSetup:
      description: Science oriented definition of a spectral window.
      type: object
      properties:
        start:
          description: The start of the spectral window
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        end:
          description: The end of the spectral window
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        spectralResolution:
          description: channel width
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        isSkyFrequency:
          description: represents an observed frequency
          type: boolean
        polarization:
          description: desired polarization
          type: string
          allOf:
          - $ref: '#/components/schemas/PolStateEnum'
    SphericalCoordSpace:
      description: "Spatial domain, three-dimensional spherical coordinate space.\
        \ The particulars of the axis descriptions depend on the flavor of space being\
        \ instantiated. In Appendix B., we provide a Standard Spherical Coordinate\
        \ Space instance which applies to many Astronomical use cases. It provides\
        \ the default space for SpaceSys instances, and may be referenced in serializations."
      type: object
      properties:
        axis:
          type: array
          items:
            $ref: '#/components/schemas/Axis'
          writeOnly: true
    SphericalPoint:
      description: A point in space expressed in spherical coordinates
      type: object
      properties:
        r:
          description: radius
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        theta:
          description: polar angle
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        phi:
          description: azimuthal angle
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
    StdRefLocation:
      description: "An absolute a-priori known location in phase space (position and\
        \ velocity). Values are selected from the StdRefPosition vocabulary. Considering\
        \ that the GEOCENTER is really the only place for which we know the absolute\
        \ location at all times, all other locations require the specification of\
        \ a planetary ephemeris. LSR[KD] are reserved for spectral and reshift frames.\
        \ TOPOCENTER (location of the observer) is special in that it assumes that\
        \ the observing location is available through other means (e.g. a geographic\
        \ location or an orbit ephemeris). RELOCATABLE is available for simulations.\
        \ UNKNOWN should only be used if absolutely necessary."
      type: object
      properties:
        position:
          description: Standard reference location. Values MUST be selected from the
            controlled vocabulary at the given URL.
          type: string
    StringIdentifier:
      description: a string identifier
      type: object
      properties:
        value:
          type: string
    SubjectMap:
      type: object
      properties:
        _id:
          format: int64
          type: integer
        person:
          description: the person here
          type: object
          allOf:
          - $ref: '#/components/schemas/Person'
          oneOf:
          - $ref: '#/components/schemas/Person'
          - format: int32
            type: integer
        uid:
          type: string
    SubmittedProposal:
      description: an instance of a proposal that has been submitted
      type: object
      properties:
        submissionDate:
          description: the date that the proposal was submitted
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        proposal:
          description: A reference to - the proposal that was submitted
          type: object
          allOf:
          - $ref: '#/components/schemas/ObservingProposal'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    SupportingDocument:
      description: a document
      type: object
      properties:
        title:
          description: document title
          type: string
        location:
          description: location of document
          type: string
    TAC:
      description: time allocation committee
      type: object
      properties:
        members:
          description: members of the committee
          type: array
          items:
            $ref: '#/components/schemas/CommitteeMember'
    TacRole:
      description: A role within the timeAllocation committee
      enum:
      - TECHNICALREVIEWER
      - SCIENCEREVIEWER
      - CHAIR
      type: string
    Target:
      description: A target source
      type: object
      properties:
        sourceName:
          description: A common name for the source
          type: string
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    TargetField:
      description: the field points to the associated target
      type: object
      properties:
        xmlId:
          type: string
        name:
          description: ""
          type: string
    TargetObservation:
      description: an observation of the scientific target
      type: object
      properties:
        constraints:
          description: any constraints on the observation
          type: array
          items:
            $ref: '#/components/schemas/ObservingConstraint'
        target:
          description: A reference to - The actual target of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Target'
        field:
          description: A reference to - The Field for the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/Field'
        technicalGoal:
          description: A reference to - The technical goals of the observation
          type: object
          allOf:
          - $ref: '#/components/schemas/TechnicalGoal'
    TechnicalGoal:
      description: collects together the technical goals of the proposal
      type: object
      properties:
        performance:
          description: ""
          type: object
          allOf:
          - $ref: '#/components/schemas/PerformanceParameters'
        spectrum:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/ScienceSpectralWindow'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    Telescope:
      description: ""
      type: object
      properties:
        name:
          description: telescope name
          type: string
        wikiId:
          description: the wikidata id for the Instrument
          type: object
          allOf:
          - $ref: '#/components/schemas/WikiDataId'
        location:
          description: the location of the telescope
          type: object
          allOf:
          - $ref: '#/components/schemas/GeocentricPoint'
        xmlId:
          type: string
          xml:
            name: id
            attribute: true
    TelescopeArray:
      description: a set of telescopes that are operated together for an observation
      type: object
      properties:
        name:
          description: the array name
          type: string
        arrayMembers:
          description: the telescopes that make up the array
          type: array
          items:
            $ref: '#/components/schemas/TelescopeArrayMember'
    TelescopeArrayMember:
      description: ""
      type: object
      properties:
        telescope:
          description: 'A reference to - '
          type: object
          allOf:
          - $ref: '#/components/schemas/Telescope'
    TextFormats:
      description: acceptable text formats for document submission
      enum:
      - LATEX
      - RST
      - ASCIIDOC
      type: string
    TimeFrame:
      description: A TimeFrame SHALL include a time scale and reference position.
        It MAY also include a reference direction.
      type: object
      properties:
        refPosition:
          description: "The spatial location at which the coordinate is considered\
            \ to have been taken. This model supports locations provided as either\
            \ a standard reference position (e.g. GEOCENTER), or a coordinate specifying\
            \ a custom location (e.g. long, lat, height)."
          type: object
          allOf:
          - $ref: '#/components/schemas/RefLocation'
        timescale:
          description: The time scale sets the reference frame. The value MUST be
            selected from the controlled vocabulary at the given URL.
          type: string
        refDirection:
          description: "The reference direction is needed if the time stamps are transformed\
            \ to a time frame with a different reference position. In those situations,\
            \ the solar system ephemeris also comes into play. See: FITS WCS Paper\
            \ IV for details, but in short: The reference direction, presumably the\
            \ direction to the thing being observed, is used in conjunction with the\
            \ reference position and planetary ephemeris to determine the correction\
            \ applied for the path length change. To be fully useful, one also needs\
            \ to know the location at which the observation was made ( i.e. the observatory\
            \ location), which is not considered to be Frame metadata."
          type: object
          allOf:
          - $ref: '#/components/schemas/RefLocation'
    TimeInstant:
      description: "TimeStamps which specify a specific instant in time. We define\
        \ three subtypes (ISOTime, JD, MJD), which allow users to explicitly identify\
        \ the representation and interpretation of the TimeInstant."
      type: object
    TimeOffset:
      description: Time is given as an offset from a specific point in time (time0).
      type: object
      properties:
        time:
          description: The TimeOffset coordinate value.
          type: object
          allOf:
          - $ref: '#/components/schemas/RealQuantity'
        time0:
          description: "The reference time from which the offset is calculated. This\
            \ MUST be given as a TimeInstant (e.g.: JD, MJD, ISOTime)."
          type: object
          allOf:
          - $ref: '#/components/schemas/TimeInstant'
    TimeStamp:
      description: "This is the abstract basis for a set of simple time domain coordinates\
        \ which are expected to accommodate the vast majority of use cases. All TimeStamps,\
        \ by definition, exist in a standard 1-D coordinate space, with domainMin|Max\
        \ of +/-Infinity. All TimeStamps MUST refer to an appropriate TimeSys."
      type: object
    TimeSys:
      description: "Specialized coordinate system for the Temporal domain. This object\
        \ SHOULD include an appropriate TimeFrame. If a CoordSpace is not provided,\
        \ it is assumed to be represented by a Standard 1-Dimensional Coordinate Space\
        \ as described in Appendix B."
      type: object
      properties:
        xmlId:
          type: string
    TimingConstraint:
      description: Any specific timing requirements for the observing
      type: object
      properties:
        note:
          description: ""
          type: string
        isAvoidConstraint:
          description: ""
          type: boolean
    TimingWindow:
      description: particular time range
      type: object
      properties:
        note:
          description: ""
          type: string
        isAvoidConstraint:
          description: ""
          type: boolean
        startTime:
          description: ""
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
        endTime:
          description: ""
          type: string
          allOf:
          - $ref: '#/components/schemas/Date'
    Unit:
      description: Must conform to definition of unit in VOUnit spec.
      type: object
      properties:
        value:
          type: string
    UploadItemSchema:
      format: binary
      type: string
    WikiDataId:
      description: a WikiData identifier
      type: object
      properties:
        value:
          type: string
  securitySchemes:
    SecurityScheme:
      type: openIdConnect
      description: Authentication
      openIdConnectUrl: http://keycloak/aai/realms/orppst/.well-known/openid-configuration
